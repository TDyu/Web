doctype html
html
	head
		title SVG
		link(rel="stylesheet", href="../css/style.css")
	body
		h1 SVG (Scalable Vector Graphics, 可縮放向量圖形)
		p 是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式。SVG由W3C制定，是一个开放标准 (fr. wiki)<br>不管放多大都清楚
		
		hr
		
		//
			SVG大寫小寫都可
			viewport vs viewBox:(多看看...這空間概念真煩...不過想像一下也還好了)
			https://pjchender.blogspot.tw/2017/03/svg-viewport-viewbox-zoomdrag.html  
		// #是用來加上id 
		svg#pic1(viewbox="-50 -50 100 100")
			// 順序是上而下被疊加 
			// 線(x1=起點x, y1=起點y, x2=終點x, y2=終點y) 
				座標值預設都是0
				可以不要逗號 
			line(x1=-20, y1=0, x2=20, y2=0)
			line(y1=-20, y2=20)
			// 圓形(cx=圓心x, 圓心y, r=半徑) 
			circle(cx=0, cy=0, r=10)
				//
					SVG動畫法1: 對屬性做動畫
					animate(attributeName="要改的屬性名", dur="持續長度", values="每個影格針對要改的那個屬性值的變化,以";"隔開", repeatCount="次數(無限次是indefinite)") 
				//
					優點: ...不動css?
					缺點: 影格設定麻煩, 能改的少
				//
					SVG在html直接做動畫, 要寫在那個元素的裡面 
				animate(attributeName="r", dur="2s", values="10; 20; 10", repeatCount="indefinite")

		svg#pic2(viewbox="-50 -50 100 100")
			circle(cx=0, cy=0, r=10)
			//
				SVG擅長之一:組隊!
				用一個g, 其他推入它底下
				方便一起做動畫(但是動畫就是要直接放在g的下層, 不是針對哪個元素) 
			g
				line(x1=-20, y1=0, x2=20, y2=0)
				line(y1=-20, y2=20)
				// 矩形(左上角x, 左上角y, width, height) 
				rect(x=-20, y=-20, width=40, height=40)
				//
					SVG動畫法2: 對變形/位移做變化
					animateTransform(attrbuteName="transform", type="scale/rotate...", dur="持續長度", values="每個影格的值變化", repeatCount="次數") 
				animateTransform(attributeName="transform", type="rotate", dur="2s", values="0; 360", repeatCount="indefinite")

		//	折線圖。
			圖表首選svg
			還可動態更新內部內容
			(通常就是會用js生...要不你要真的刻刻刻啊) 
		svg#pic3(viewbox="0 0 200 200")
			// 點的部分 
			circle(cx=0, cy=50, r=3)
				animate(attributeName="cy", dur="2s", values="50;60;50", repeatCount="indefinite")
			circle(cx=50, cy=80, r=3)
				animate(attributeName="cy", dur="2s", values="80;40;80", repeatCount="indefinite")
			circle(cx=100, cy=60, r=3)
				animate(attributeName="cy", dur="2s", values="60;30;60", repeatCount="indefinite")
			circle(cx=150, cy=20, r=3)
				animate(attributeName="cy", dur="2s", values="20;70;20", repeatCount="indefinite")
			circle(cx=200, cy=40, r=3)
				animate(attributeName="cy", dur="2s", values="40;60;40", repeatCount="indefinite")
			// 
				折線(points="第一點x,第一點y 第二點x,第二點y...")
				就是一組座標用逗點隔開, 每一組用空格隔開
				但是預設閉合起來的區域會填色
				所以就再css裡面把顏色拿掉吧(fill) 
			polyline(points="0,50 50,80 100,60 150,20 200,40")
				animate(attributeName="points", dur="2s", values="0,50 50,80 100,60 150,20 200,40;0,60 50,40 100,30 150,70 200,60;0,50 50,80 100,60 150,20 200,40", repeatCount="indefinite")

		svg#pic4(viewbox="0 0 200 200")
			rect(x=0, y=0, width=20, height=100)
				animate(attributeName="height" begin="0s" dur="2s" values="100;200;100" repeatCount="indefinite" )
			rect(x=30, y=0, width=20, height=120)
				animate(attributeName="height" begin="-0.3s" dur="2s" values="100;200;100" repeatCount="indefinite")
			rect(x=60, y=0, width=20, height=140)
				animate(attributeName="height" begin="-0.6s" dur="2s" values="100;200;100" repeatCount="indefinite")
			rect(x=90, y=0, width=20, height=160)
				animate(attributeName="height" begin="-0.9s" dur="2s" values="100;200;100" repeatCount="indefinite")
			rect(x=120, y=0, width=20, height=120)
				animate(attributeName="height" begin="-1.2s" dur="2s" values="100;200;100" repeatCount="indefinite")
			rect(x=150, y=0, width=20, height=80)
				animate(attributeName="height" begin="-1.5s" dur="2s" values="100;200;100" repeatCount="indefinite")
			rect(x=180, y=0, width=20, height=60)
				animate(attributeName="height" begin="-1.8s" dur="2s" values="100;200;100" repeatCount="indefinite")
		
		//
			電腦 (建議可以先規劃一下寬高就比較好算座標)
			因為要對中間畫物件, 所以又移動了viewbox方便
			可以先設一個大概, 最後再調viewbox的位置 
		svg#pic5(viewbox="-50 -40 100 100")
			// 
				外框
				x,y看起來中間的設定法就是一半寬高 
			rect.frame_outer(x=-30, y=-20, width=60, height=40)
			// 內框 
			rect.frame_inner(x=-25, y=-15, width=50, height=30)
			// 垂直支柱 
			rect.neck(x=-2, y=20, width=4, height=10)
			// 水平底座 
			rect.bottom(x=-10, y=30, width=20, height=5)
			g.screen_content
				// 螢幕裡下面那條線
				line(x1=-20, y1=0, x2=-8, y2=0)
				// 螢幕裡上面那條線 
				line(x1=-20, y1=5, x2=-5, y2=5)
				// 螢幕裡的圈圈 
				circle(cx=10, cy=0, r=7)
			//
				文字(最左上角點x, 最左上角點y) 字
				
			text.text(x=-30, y=50) My Computer